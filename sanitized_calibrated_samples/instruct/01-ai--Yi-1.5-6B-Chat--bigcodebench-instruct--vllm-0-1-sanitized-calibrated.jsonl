{"task_id": "BigCodeBench/1138", "solution": "import numpy as np\nimport itertools\ndef task_func(matrix):\n    # Sort the input matrix in ascending order\n    sorted_matrix = np.sort(matrix, axis=0)\n    \n    # Find all unique combinations of two elements from the sorted matrix\n    unique_combinations = list(itertools.combinations(sorted_matrix.flatten(), 2))\n    \n    return np.array(sorted_matrix.flatten()), unique_combinations"}
{"task_id": "BigCodeBench/1139", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\ndef task_func(data):\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Hours', 'Scores'])\n    \n    # Split the data into train and test sets\n    X = df['Hours'].values.reshape(-1, 1)\n    y = df['Scores'].values.reshape(-1, 1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Train a simple linear regression model\n    reg = LinearRegression()\n    reg.fit(X_train, y_train)\n    \n    # Predict the scores for the test set\n    y_pred = reg.predict(X_test)\n    \n    # Calculate the mean squared error\n    mse = np.mean((y_test - y_pred) ** 2)\n    \n    return mse"}
